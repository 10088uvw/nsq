package nsqd

import (
	"fmt"
	"io/ioutil"
	"os"
	"testing"
	"time"

	"github.com/youzan/nsq/internal/ext"
	"github.com/youzan/nsq/internal/test"
)

func TestKVTopicWriteRead(t *testing.T) {
	opts := NewOptions()
	tmpDir, err := ioutil.TempDir("", fmt.Sprintf("nsq-test-%d", time.Now().UnixNano()))
	if err != nil {
		panic(err)
	}
	opts.DataPath = tmpDir
	defer os.RemoveAll(tmpDir)
	kvt := NewKVTopic("test-kv-topic", 0, opts)
	test.NotNil(t, kvt)
	singleSize := int32(47)
	m := NewMessageWithExt(1, make([]byte, 10), ext.JSON_HEADER_EXT_VER, []byte("tes1"))
	m.TraceID = 1
	wsize, end, err := kvt.PutMessage(m)
	t.Log(err)
	test.Nil(t, err)
	test.Equal(t, singleSize, wsize)
	test.Equal(t, end.Offset(), BackendOffset(wsize))
	test.Equal(t, end.TotalMsgCnt(), int64(1))
	msgs := make([]*Message, 0)
	m2 := NewMessageWithExt(2, make([]byte, 10), ext.JSON_HEADER_EXT_VER, []byte("tes2"))
	m2.TraceID = 2
	m3 := NewMessageWithExt(3, make([]byte, 10), ext.JSON_HEADER_EXT_VER, []byte("tes3"))
	msgs = append(msgs, m2, m3)
	wfirst, wsize, end, err := kvt.PutMessages(msgs)
	test.Nil(t, err)
	test.Equal(t, int32(singleSize*2), wsize)
	test.Equal(t, BackendOffset(singleSize), wfirst)
	test.Equal(t, BackendOffset(singleSize*3), end.Offset())
	test.Equal(t, int64(3), end.TotalMsgCnt())
	test.Equal(t, int64(end.Offset()), kvt.lastOffset)
	test.Equal(t, end.TotalMsgCnt(), kvt.lastCnt)

	dbMsg, err := kvt.GetMsgByID(MessageID(1))
	test.Nil(t, err)
	test.Equal(t, m.ID, dbMsg.ID)
	test.Equal(t, m.Body, dbMsg.Body)
	test.Equal(t, m.TraceID, dbMsg.TraceID)
	test.Equal(t, m.ExtBytes, dbMsg.ExtBytes)
	dbMsg, err = kvt.GetMsgByID(MessageID(2))
	test.Nil(t, err)
	test.Equal(t, m2.ID, dbMsg.ID)
	test.Equal(t, m2.Body, dbMsg.Body)
	test.Equal(t, m2.TraceID, dbMsg.TraceID)
	test.Equal(t, m2.ExtBytes, dbMsg.ExtBytes)
	dbMsg, err = kvt.GetMsgByID(MessageID(3))
	test.Nil(t, err)
	test.Equal(t, m3.ID, dbMsg.ID)
	test.Equal(t, m3.Body, dbMsg.Body)
	test.Equal(t, m3.TraceID, dbMsg.TraceID)
	test.Equal(t, m3.ExtBytes, dbMsg.ExtBytes)

	dbMsg, err = kvt.GetMsgByOffset(0)
	test.Nil(t, err)
	test.Equal(t, m.ID, dbMsg.ID)
	test.Equal(t, m.Body, dbMsg.Body)
	test.Equal(t, m.TraceID, dbMsg.TraceID)
	test.Equal(t, m.ExtBytes, dbMsg.ExtBytes)
	dbMsg, err = kvt.GetMsgByOffset(int64(singleSize))
	test.Nil(t, err)
	test.Equal(t, m2.ID, dbMsg.ID)
	test.Equal(t, m2.Body, dbMsg.Body)
	test.Equal(t, m2.TraceID, dbMsg.TraceID)
	test.Equal(t, m2.ExtBytes, dbMsg.ExtBytes)
	dbMsg, err = kvt.GetMsgByOffset(int64(singleSize * 2))
	test.Nil(t, err)
	test.Equal(t, m3.ID, dbMsg.ID)
	test.Equal(t, m3.Body, dbMsg.Body)
	test.Equal(t, m3.TraceID, dbMsg.TraceID)
	test.Equal(t, m3.ExtBytes, dbMsg.ExtBytes)

	dbMsg, err = kvt.GetMsgByCnt(0)
	test.Nil(t, err)
	test.Equal(t, m.ID, dbMsg.ID)
	test.Equal(t, m.Body, dbMsg.Body)
	test.Equal(t, m.TraceID, dbMsg.TraceID)
	test.Equal(t, m.ExtBytes, dbMsg.ExtBytes)
	dbMsg, err = kvt.GetMsgByCnt(1)
	test.Nil(t, err)
	test.Equal(t, m2.ID, dbMsg.ID)
	test.Equal(t, m2.Body, dbMsg.Body)
	test.Equal(t, m2.TraceID, dbMsg.TraceID)
	test.Equal(t, m2.ExtBytes, dbMsg.ExtBytes)
	dbMsg, err = kvt.GetMsgByCnt(2)
	test.Nil(t, err)
	test.Equal(t, m3.ID, dbMsg.ID)
	test.Equal(t, m3.Body, dbMsg.Body)
	test.Equal(t, m3.TraceID, dbMsg.TraceID)
	test.Equal(t, m3.ExtBytes, dbMsg.ExtBytes)

	msgs, err = kvt.GetMsgByTraceID(1, 2)
	test.Nil(t, err)
	test.Equal(t, 1, len(msgs))
	test.Equal(t, m.ID, msgs[0].ID)
	test.Equal(t, m.Body, msgs[0].Body)
	test.Equal(t, m.TraceID, msgs[0].TraceID)
	test.Equal(t, m.ExtBytes, msgs[0].ExtBytes)
	msgs, err = kvt.GetMsgByTraceID(1, 2)
	test.Nil(t, err)
	test.Equal(t, 1, len(msgs))
	test.Equal(t, m.ID, msgs[0].ID)
	test.Equal(t, m.Body, msgs[0].Body)
	test.Equal(t, m.TraceID, msgs[0].TraceID)
	test.Equal(t, m.ExtBytes, msgs[0].ExtBytes)
	msgs, err = kvt.GetMsgByTraceID(2, 2)
	test.Nil(t, err)
	test.Equal(t, 1, len(msgs))
	test.Equal(t, m2.ID, msgs[0].ID)
	test.Equal(t, m2.Body, msgs[0].Body)
	test.Equal(t, m2.TraceID, msgs[0].TraceID)
	test.Equal(t, m2.ExtBytes, msgs[0].ExtBytes)
	msgs, err = kvt.GetMsgByTraceID(3, 2)
	test.Nil(t, err)
	test.Equal(t, 0, len(msgs))
}
