// Code generated by protoc-gen-go.
// source: coord_grpc.proto
// DO NOT EDIT!

/*
Package coordgrpc is a generated protocol buffer package.

It is generated from these files:
	coord_grpc.proto

It has these top-level messages:
	CoordErr
	RpcTopicData
	ChannelConsumerOffset
	CommitLogData
	NsqdMessage
	RpcChannelOffsetArg
	RpcPutMessage
	RpcPutMessages
*/
package coordgrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CoordErr struct {
	ErrMsg  string `protobuf:"bytes,1,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrType int32  `protobuf:"varint,3,opt,name=err_type,json=errType" json:"err_type,omitempty"`
}

func (m *CoordErr) Reset()                    { *m = CoordErr{} }
func (m *CoordErr) String() string            { return proto.CompactTextString(m) }
func (*CoordErr) ProtoMessage()               {}
func (*CoordErr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RpcTopicData struct {
	TopicName               string `protobuf:"bytes,1,opt,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	TopicPartition          int32  `protobuf:"varint,2,opt,name=topic_partition,json=topicPartition" json:"topic_partition,omitempty"`
	Epoch                   int64  `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
	TopicWriteEpoch         int64  `protobuf:"varint,4,opt,name=topic_write_epoch,json=topicWriteEpoch" json:"topic_write_epoch,omitempty"`
	TopicLeaderSessionEpoch int64  `protobuf:"varint,5,opt,name=topic_leader_session_epoch,json=topicLeaderSessionEpoch" json:"topic_leader_session_epoch,omitempty"`
	TopicLeaderSession      string `protobuf:"bytes,6,opt,name=topic_leader_session,json=topicLeaderSession" json:"topic_leader_session,omitempty"`
}

func (m *RpcTopicData) Reset()                    { *m = RpcTopicData{} }
func (m *RpcTopicData) String() string            { return proto.CompactTextString(m) }
func (*RpcTopicData) ProtoMessage()               {}
func (*RpcTopicData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ChannelConsumerOffset struct {
	Voffset       int64 `protobuf:"varint,1,opt,name=voffset" json:"voffset,omitempty"`
	Flush         bool  `protobuf:"varint,2,opt,name=flush" json:"flush,omitempty"`
	AllowBackward bool  `protobuf:"varint,3,opt,name=allow_backward,json=allowBackward" json:"allow_backward,omitempty"`
}

func (m *ChannelConsumerOffset) Reset()                    { *m = ChannelConsumerOffset{} }
func (m *ChannelConsumerOffset) String() string            { return proto.CompactTextString(m) }
func (*ChannelConsumerOffset) ProtoMessage()               {}
func (*ChannelConsumerOffset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CommitLogData struct {
	LogID        int64 `protobuf:"varint,1,opt,name=logID" json:"logID,omitempty"`
	Epoch        int64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	LastMsgLogID int64 `protobuf:"varint,3,opt,name=last_msg_logID,json=lastMsgLogID" json:"last_msg_logID,omitempty"`
	MsgOffset    int64 `protobuf:"varint,4,opt,name=msg_offset,json=msgOffset" json:"msg_offset,omitempty"`
	MsgSize      int32 `protobuf:"varint,5,opt,name=msg_size,json=msgSize" json:"msg_size,omitempty"`
	MsgCnt       int64 `protobuf:"varint,6,opt,name=msg_cnt,json=msgCnt" json:"msg_cnt,omitempty"`
	MsgNum       int32 `protobuf:"varint,7,opt,name=msg_num,json=msgNum" json:"msg_num,omitempty"`
}

func (m *CommitLogData) Reset()                    { *m = CommitLogData{} }
func (m *CommitLogData) String() string            { return proto.CompactTextString(m) }
func (*CommitLogData) ProtoMessage()               {}
func (*CommitLogData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type NsqdMessage struct {
	ID        uint64 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Trace_ID  uint64 `protobuf:"varint,2,opt,name=trace_ID,json=traceID" json:"trace_ID,omitempty"`
	Body      []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Attemps   uint32 `protobuf:"varint,5,opt,name=attemps" json:"attemps,omitempty"`
}

func (m *NsqdMessage) Reset()                    { *m = NsqdMessage{} }
func (m *NsqdMessage) String() string            { return proto.CompactTextString(m) }
func (*NsqdMessage) ProtoMessage()               {}
func (*NsqdMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RpcChannelOffsetArg struct {
	TopicData     *RpcTopicData          `protobuf:"bytes,1,opt,name=topic_data,json=topicData" json:"topic_data,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	ChannelOffset *ChannelConsumerOffset `protobuf:"bytes,3,opt,name=channel_offset,json=channelOffset" json:"channel_offset,omitempty"`
}

func (m *RpcChannelOffsetArg) Reset()                    { *m = RpcChannelOffsetArg{} }
func (m *RpcChannelOffsetArg) String() string            { return proto.CompactTextString(m) }
func (*RpcChannelOffsetArg) ProtoMessage()               {}
func (*RpcChannelOffsetArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RpcChannelOffsetArg) GetTopicData() *RpcTopicData {
	if m != nil {
		return m.TopicData
	}
	return nil
}

func (m *RpcChannelOffsetArg) GetChannelOffset() *ChannelConsumerOffset {
	if m != nil {
		return m.ChannelOffset
	}
	return nil
}

type RpcPutMessage struct {
	TopicData    *RpcTopicData  `protobuf:"bytes,1,opt,name=topic_data,json=topicData" json:"topic_data,omitempty"`
	LogData      *CommitLogData `protobuf:"bytes,2,opt,name=log_data,json=logData" json:"log_data,omitempty"`
	TopicMessage *NsqdMessage   `protobuf:"bytes,3,opt,name=topic_message,json=topicMessage" json:"topic_message,omitempty"`
}

func (m *RpcPutMessage) Reset()                    { *m = RpcPutMessage{} }
func (m *RpcPutMessage) String() string            { return proto.CompactTextString(m) }
func (*RpcPutMessage) ProtoMessage()               {}
func (*RpcPutMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RpcPutMessage) GetTopicData() *RpcTopicData {
	if m != nil {
		return m.TopicData
	}
	return nil
}

func (m *RpcPutMessage) GetLogData() *CommitLogData {
	if m != nil {
		return m.LogData
	}
	return nil
}

func (m *RpcPutMessage) GetTopicMessage() *NsqdMessage {
	if m != nil {
		return m.TopicMessage
	}
	return nil
}

type RpcPutMessages struct {
	TopicData    *RpcTopicData  `protobuf:"bytes,1,opt,name=topic_data,json=topicData" json:"topic_data,omitempty"`
	LogData      *CommitLogData `protobuf:"bytes,2,opt,name=log_data,json=logData" json:"log_data,omitempty"`
	TopicMessage []*NsqdMessage `protobuf:"bytes,3,rep,name=topic_message,json=topicMessage" json:"topic_message,omitempty"`
}

func (m *RpcPutMessages) Reset()                    { *m = RpcPutMessages{} }
func (m *RpcPutMessages) String() string            { return proto.CompactTextString(m) }
func (*RpcPutMessages) ProtoMessage()               {}
func (*RpcPutMessages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RpcPutMessages) GetTopicData() *RpcTopicData {
	if m != nil {
		return m.TopicData
	}
	return nil
}

func (m *RpcPutMessages) GetLogData() *CommitLogData {
	if m != nil {
		return m.LogData
	}
	return nil
}

func (m *RpcPutMessages) GetTopicMessage() []*NsqdMessage {
	if m != nil {
		return m.TopicMessage
	}
	return nil
}

func init() {
	proto.RegisterType((*CoordErr)(nil), "coordgrpc.CoordErr")
	proto.RegisterType((*RpcTopicData)(nil), "coordgrpc.RpcTopicData")
	proto.RegisterType((*ChannelConsumerOffset)(nil), "coordgrpc.ChannelConsumerOffset")
	proto.RegisterType((*CommitLogData)(nil), "coordgrpc.CommitLogData")
	proto.RegisterType((*NsqdMessage)(nil), "coordgrpc.NsqdMessage")
	proto.RegisterType((*RpcChannelOffsetArg)(nil), "coordgrpc.RpcChannelOffsetArg")
	proto.RegisterType((*RpcPutMessage)(nil), "coordgrpc.RpcPutMessage")
	proto.RegisterType((*RpcPutMessages)(nil), "coordgrpc.RpcPutMessages")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NsqdCoordRpcV2 service

type NsqdCoordRpcV2Client interface {
	UpdateChannelOffset(ctx context.Context, in *RpcChannelOffsetArg, opts ...grpc.CallOption) (*CoordErr, error)
	PutMessage(ctx context.Context, in *RpcPutMessage, opts ...grpc.CallOption) (*CoordErr, error)
	PutMessages(ctx context.Context, in *RpcPutMessages, opts ...grpc.CallOption) (*CoordErr, error)
}

type nsqdCoordRpcV2Client struct {
	cc *grpc.ClientConn
}

func NewNsqdCoordRpcV2Client(cc *grpc.ClientConn) NsqdCoordRpcV2Client {
	return &nsqdCoordRpcV2Client{cc}
}

func (c *nsqdCoordRpcV2Client) UpdateChannelOffset(ctx context.Context, in *RpcChannelOffsetArg, opts ...grpc.CallOption) (*CoordErr, error) {
	out := new(CoordErr)
	err := grpc.Invoke(ctx, "/coordgrpc.NsqdCoordRpcV2/UpdateChannelOffset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsqdCoordRpcV2Client) PutMessage(ctx context.Context, in *RpcPutMessage, opts ...grpc.CallOption) (*CoordErr, error) {
	out := new(CoordErr)
	err := grpc.Invoke(ctx, "/coordgrpc.NsqdCoordRpcV2/PutMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsqdCoordRpcV2Client) PutMessages(ctx context.Context, in *RpcPutMessages, opts ...grpc.CallOption) (*CoordErr, error) {
	out := new(CoordErr)
	err := grpc.Invoke(ctx, "/coordgrpc.NsqdCoordRpcV2/PutMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NsqdCoordRpcV2 service

type NsqdCoordRpcV2Server interface {
	UpdateChannelOffset(context.Context, *RpcChannelOffsetArg) (*CoordErr, error)
	PutMessage(context.Context, *RpcPutMessage) (*CoordErr, error)
	PutMessages(context.Context, *RpcPutMessages) (*CoordErr, error)
}

func RegisterNsqdCoordRpcV2Server(s *grpc.Server, srv NsqdCoordRpcV2Server) {
	s.RegisterService(&_NsqdCoordRpcV2_serviceDesc, srv)
}

func _NsqdCoordRpcV2_UpdateChannelOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChannelOffsetArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsqdCoordRpcV2Server).UpdateChannelOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordgrpc.NsqdCoordRpcV2/UpdateChannelOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsqdCoordRpcV2Server).UpdateChannelOffset(ctx, req.(*RpcChannelOffsetArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsqdCoordRpcV2_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcPutMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsqdCoordRpcV2Server).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordgrpc.NsqdCoordRpcV2/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsqdCoordRpcV2Server).PutMessage(ctx, req.(*RpcPutMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsqdCoordRpcV2_PutMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcPutMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsqdCoordRpcV2Server).PutMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordgrpc.NsqdCoordRpcV2/PutMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsqdCoordRpcV2Server).PutMessages(ctx, req.(*RpcPutMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsqdCoordRpcV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coordgrpc.NsqdCoordRpcV2",
	HandlerType: (*NsqdCoordRpcV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateChannelOffset",
			Handler:    _NsqdCoordRpcV2_UpdateChannelOffset_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _NsqdCoordRpcV2_PutMessage_Handler,
		},
		{
			MethodName: "PutMessages",
			Handler:    _NsqdCoordRpcV2_PutMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("coord_grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x4e, 0x14, 0x3d,
	0x18, 0xfe, 0x76, 0x17, 0xf6, 0xe7, 0x65, 0x77, 0xbf, 0xef, 0x2b, 0x28, 0x03, 0x51, 0x43, 0x26,
	0x1a, 0x8d, 0x07, 0xc4, 0x40, 0xe2, 0x09, 0x31, 0x46, 0x17, 0x62, 0x4c, 0x16, 0x24, 0x05, 0x35,
	0x1e, 0x4d, 0xca, 0x6c, 0x19, 0x26, 0xce, 0x4c, 0xc7, 0xb6, 0x2b, 0xc1, 0x63, 0x13, 0x6f, 0xc7,
	0x53, 0xbd, 0x07, 0x6f, 0xc1, 0x6b, 0xb1, 0x7d, 0xdb, 0x81, 0x59, 0x85, 0xc4, 0x78, 0xe2, 0x59,
	0x9f, 0xf7, 0xf7, 0xe9, 0xd3, 0x67, 0x67, 0xe1, 0xbf, 0x58, 0x08, 0x39, 0x89, 0x12, 0x59, 0xc6,
	0xeb, 0xa5, 0x14, 0x5a, 0x90, 0x1e, 0x46, 0x6c, 0x20, 0x7c, 0x03, 0xdd, 0x91, 0x05, 0x3b, 0x52,
	0x92, 0x65, 0xe8, 0x70, 0x29, 0xa3, 0x5c, 0x25, 0x41, 0x63, 0xad, 0x71, 0xaf, 0x47, 0xdb, 0x06,
	0xee, 0xaa, 0x84, 0xac, 0x40, 0xd7, 0x26, 0x62, 0x31, 0xe1, 0x41, 0xd3, 0x64, 0xe6, 0xa9, 0x2d,
	0x1c, 0x19, 0x58, 0xa5, 0xf4, 0x59, 0xc9, 0x83, 0xd6, 0x79, 0xea, 0xd0, 0xc0, 0xf0, 0x53, 0x13,
	0xfa, 0xb4, 0x8c, 0x0f, 0x45, 0x99, 0xc6, 0xdb, 0x4c, 0x33, 0x72, 0x13, 0x40, 0x5b, 0x10, 0x15,
	0x2c, 0xe7, 0x7e, 0x45, 0x0f, 0x23, 0x7b, 0x26, 0x40, 0xee, 0xc2, 0xbf, 0x2e, 0x5d, 0x32, 0xa9,
	0x53, 0x9d, 0x8a, 0xc2, 0x2f, 0x1b, 0x62, 0x78, 0xbf, 0x8a, 0x92, 0x25, 0x98, 0xe7, 0xa5, 0x88,
	0x4f, 0x70, 0x61, 0x8b, 0x3a, 0x40, 0xee, 0xc3, 0xff, 0xae, 0xfd, 0x54, 0xa6, 0x9a, 0x47, 0xae,
	0x62, 0x0e, 0x2b, 0xdc, 0xdc, 0xd7, 0x36, 0xbe, 0x83, 0xb5, 0x5b, 0xb0, 0xea, 0x6a, 0x33, 0xce,
	0x26, 0x5c, 0x46, 0x8a, 0x2b, 0x65, 0x26, 0xfb, 0xa6, 0x79, 0x6c, 0x5a, 0xc6, 0x8a, 0x31, 0x16,
	0x1c, 0xb8, 0xbc, 0x6b, 0x7e, 0x00, 0x4b, 0x97, 0x35, 0x07, 0x6d, 0xbc, 0x10, 0xf9, 0xb5, 0x2d,
	0x2c, 0xe0, 0xda, 0xe8, 0x84, 0x15, 0x05, 0xcf, 0x46, 0xa2, 0x50, 0xd3, 0x9c, 0xcb, 0x17, 0xc7,
	0xc7, 0x8a, 0x6b, 0x12, 0x40, 0xe7, 0xbd, 0xc0, 0x23, 0xca, 0xd1, 0xa2, 0x15, 0xb4, 0x77, 0x3c,
	0xce, 0xa6, 0xea, 0x04, 0x25, 0xe8, 0x52, 0x07, 0xc8, 0x1d, 0x18, 0xb2, 0x2c, 0x13, 0xa7, 0xd1,
	0x11, 0x8b, 0xdf, 0x9e, 0x32, 0x39, 0x41, 0x09, 0xba, 0x74, 0x80, 0xd1, 0xa7, 0x3e, 0x18, 0x7e,
	0x6b, 0xc0, 0x60, 0x24, 0xf2, 0x3c, 0xd5, 0x63, 0x91, 0xa0, 0xf4, 0x66, 0x5c, 0x26, 0x92, 0xe7,
	0xdb, 0x7e, 0x8d, 0x03, 0x17, 0x42, 0x36, 0xeb, 0x42, 0xde, 0x86, 0x61, 0xc6, 0x94, 0xb6, 0x3e,
	0x88, 0x5c, 0x93, 0xd3, 0xb9, 0x6f, 0xa3, 0xc6, 0x0e, 0x63, 0xec, 0x35, 0x8f, 0x69, 0x0b, 0x3c,
	0x7b, 0xa7, 0x73, 0xcf, 0x44, 0xfc, 0xcd, 0x8c, 0x2f, 0x6c, 0x5a, 0xa5, 0x1f, 0x38, 0xea, 0x69,
	0x7c, 0x61, 0xf0, 0x81, 0x81, 0xd6, 0x66, 0x36, 0x15, 0x17, 0x1a, 0x25, 0x6b, 0xd1, 0xb6, 0x81,
	0xa3, 0x42, 0x57, 0x89, 0x62, 0x9a, 0x07, 0x1d, 0x6c, 0xb1, 0x89, 0xbd, 0x69, 0x1e, 0x7e, 0x6c,
	0xc0, 0xc2, 0x9e, 0x7a, 0x37, 0xd9, 0x35, 0x7a, 0xb2, 0x84, 0x93, 0x21, 0x34, 0xfd, 0x55, 0xe6,
	0x68, 0x33, 0xdd, 0xb6, 0xcb, 0xb4, 0x64, 0x31, 0x8f, 0x4c, 0xb4, 0x89, 0xd1, 0x0e, 0x62, 0x43,
	0x93, 0xc0, 0xdc, 0x91, 0x98, 0x9c, 0xe1, 0x15, 0xfa, 0x14, 0xcf, 0xe4, 0x06, 0xf4, 0x74, 0x9a,
	0x73, 0xa5, 0x59, 0x5e, 0x56, 0xcc, 0xcf, 0x03, 0xf6, 0x4d, 0x98, 0xd6, 0x3c, 0x2f, 0x15, 0x12,
	0x1f, 0xd0, 0x0a, 0x86, 0x9f, 0x1b, 0xb0, 0x68, 0x0c, 0xed, 0x9f, 0xd2, 0x5d, 0xf4, 0x89, 0x4c,
	0xc8, 0xc3, 0xca, 0xd7, 0x13, 0x23, 0x35, 0xd2, 0x5a, 0xd8, 0x58, 0x5e, 0x3f, 0xff, 0x8d, 0xad,
	0xd7, 0x7f, 0x04, 0xde, 0xf0, 0xf8, 0x28, 0x66, 0x53, 0xec, 0x66, 0x21, 0xeb, 0x1e, 0xad, 0x20,
	0x79, 0x06, 0x43, 0x7f, 0xac, 0x04, 0x6e, 0xe1, 0xd4, 0xb5, 0xda, 0xd4, 0x4b, 0x1d, 0x45, 0x07,
	0x71, 0x9d, 0x5d, 0xf8, 0xc5, 0x38, 0xc1, 0xac, 0xdf, 0x9f, 0xea, 0x4a, 0xbb, 0x3f, 0x25, 0xbb,
	0x09, 0x5d, 0x63, 0x06, 0xd7, 0xd5, 0xc4, 0xae, 0xa0, 0x4e, 0xa6, 0xee, 0x36, 0xda, 0xc9, 0xbc,
	0xed, 0xb6, 0x60, 0xe0, 0x96, 0xe5, 0x6e, 0xbb, 0xbf, 0xc6, 0xf5, 0x5a, 0x67, 0xed, 0x5d, 0x69,
	0x1f, 0x8b, 0x3d, 0x0a, 0xbf, 0x36, 0x60, 0x38, 0xc3, 0x5d, 0xfd, 0x75, 0xf2, 0xad, 0xdf, 0x25,
	0xbf, 0xf1, 0xdd, 0x90, 0xb7, 0x59, 0xfc, 0xb8, 0x1a, 0x5a, 0xaf, 0x36, 0xc8, 0x18, 0x16, 0x5f,
	0x96, 0x86, 0x02, 0x9f, 0x31, 0x10, 0xb9, 0x35, 0xcb, 0xff, 0x67, 0x77, 0xad, 0x2e, 0xce, 0x30,
	0x75, 0x9f, 0xea, 0xf0, 0x1f, 0xf2, 0x08, 0xa0, 0xf6, 0xaa, 0xc1, 0xec, 0x90, 0x8b, 0xcc, 0x55,
	0xed, 0x8f, 0x61, 0xa1, 0x2e, 0xec, 0xca, 0x55, 0xfd, 0xea, 0x8a, 0x01, 0x47, 0x6d, 0xfc, 0x2b,
	0xd9, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0x05, 0x50, 0x34, 0xa9, 0x5e, 0x06, 0x00, 0x00,
}
